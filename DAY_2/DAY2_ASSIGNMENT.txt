Explanation: Question 1

countInversions Method:
Takes an array arr as input.
Uses two nested loops to compare each element with all the elements that come after it.
If an inversion pair is found (arr[i] > arr[j]), the inversionCount is incremented.
Returns the total count of inversion pairs.

main Method:
Defines an example array P.
Calls the countInversions method and prints the result.

For the array P = [30, 45, 25, 60, 20], the indices and values are:

Index 0: 30

Index 1: 45

Index 2: 25

Index 3: 60

Index 4: 20

The inversion pairs are:

(30, 25) → 30 > 25 (indices 0 and 2)

(30, 20) → 30 > 20 (indices 0 and 4)

(45, 25) → 45 > 25 (indices 1 and 2)

(45, 20) → 45 > 20 (indices 1 and 4)

(25, 20) → 25 > 20 (indices 2 and 4)

(60, 20) → 60 > 20 (indices 3 and 4)

Total inversion count: 6


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



Explanation: Question-2


Initialize the PrefixSum array with the same length as the Sales array.

Set the first element of PrefixSum to be the same as the first element of Sales.

Loop through the Sales array starting from the second element.

For each element, add the current sales amount to the previous element in the PrefixSum array and store it in the current position of PrefixSum.

Imports: The code imports the necessary classes from the Java Collections Framework (List, Set, HashSet, ArrayList, and Collections).

Example Input:
Copy
Sales = [10, 20, 15, 30, 25]
Output:
Copy
Prefix Sum array:
10 30 45 75 100

Hour 1:
Sales: 10

Prefix Sum: 10 (only the first hour's sales)

Hour 2:
Sales: 20

Prefix Sum: 10 (previous sum) + 20 = 30

Hour 3:
Sales: 15

Prefix Sum: 30 (previous sum) + 15 = 45

Hour 4:
Sales: 30

Prefix Sum: 45 (previous sum) + 30 = 75

Hour 5:
Sales: 25

Prefix Sum: 75 (previous sum) + 25 = 100

This means:

At Hour 1, the total sales are 10.
At Hour 2, the total sales are 30.
At Hour 3, the total sales are 45.
At Hour 4, the total sales are 75.
At Hour 5, the total sales are 100.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - 
Explanation: Question-3

Input: The program first asks the user for the number of delivery points (m). Then, it takes the fuel consumption values for each delivery point and stores them in the Fuel[] array.

Postfix Sum Calculation: It calculates the postfix sum by iterating through the Fuel[] array from the end to the start. At each step, it adds the current fuel value to a running sum and stores it in the PostfixSum[] array.

Output: Finally, it prints the PostfixSum[] array.


Start from the last delivery point (index 4):

Fuel used: 8
Postfix sum: 8
Move to delivery point 3:

Fuel used: 7
Add to previous sum: 8 + 7 = 15
Postfix sum: 15
Move to delivery point 2:

Fuel used: 3
Add to previous sum: 15 + 3 = 18
Postfix sum: 18
Move to delivery point 1:

Fuel used: 10
Add to previous sum: 18 + 10 = 28
Postfix sum: 28
Move to delivery point 0:

Fuel used: 5
Add to previous sum: 28 + 5 = 33
Postfix sum: 33

Final Output:
PostfixSum[] = [33, 28, 18, 15, 8]

PostfixSum[0] = 33: From delivery point 0 to the end, 33 units of fuel are used.
PostfixSum[1] = 28: From delivery point 1 to the end, 28 units of fuel are used.
PostfixSum[2] = 18: From delivery point 2 to the end, 18 units of fuel are used.
PostfixSum[3] = 15: From delivery point 3 to the end, 15 units of fuel are used.
PostfixSum[4] = 8: From delivery point 4 to the end, 8 units of fuel are used.



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - -

Explanation: Question-4

Purpose: The code finds and returns a sorted list of distinct digits from an array of integers.

Key Steps:
Use a Set: A HashSet is used to store unique digits (no duplicates).
Convert Numbers to Digits: Each number is converted to a string, and then each character (digit) is added to the set.
Sort the Digits: The unique digits are then converted to a list and sorted.

Main Method:
It tests the function with the input {111, 222, 333, 4444, 666}.

Output Explanation
Given the input array {111, 222, 333, 4444, 666}, the distinct digits extracted from these numbers are:

From 111: The digit 1
From 222: The digit 2
From 333: The digit 3
From 4444: The digit 4
From 666: The digit 6
After processing all the numbers, the unique digits collected in the set are {1, 2, 3, 4, 6}. When this set is converted to a list and sorted, the final output is:

Final Output
When you run the program, the output will be:
[1, 2, 3, 4, 6]





