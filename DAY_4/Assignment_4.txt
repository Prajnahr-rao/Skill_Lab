Explanation of the Code:
Recursive Function: The validateParts method is a recursive function that checks each part of the IP address:

Base Case: If the index reaches 4, it means all parts have been validated successfully, and it returns true.
Validation: It checks if the current part is numeric, within the valid range (0-255), and does not have leading zeros.
Recursive Call: If the current part is valid, it calls itself with the next index.
Main Validation Method: The isValidIPv4 method splits the IP address into parts and initiates the recursive validation.

User Input: The main method uses a Scanner to read the IP address from the user and prints whether it is valid or not.

Example Outputs and Explanations
Valid IPv4 Address

Input: 222.111.111.111
Output: 222.111.111.111 is a valid IPv4 address.
Explanation:
The input is split into parts: ["222", "111", "111", "111"].
Each part is checked:
222: Numeric, within range (0-255), no leading zeros.
111: Numeric, within range (0-255), no leading zeros (checked three times).
All parts are valid, so the output confirms it is a valid IPv4 address.
Invalid IPv4 Address (Too Many Parts)

Input: 5555..555
Output: 5555..555 is not a valid IPv4 address.
Explanation:
The input is split into parts: ["5555", "", "555"].
The second part is empty, which is invalid.
The method checks the number of parts and finds that there are not exactly 4 valid segments, leading to the output indicating it is not valid.


-----------------------------------------------------------------------------------------------------------------------------





Main Logic
Count Distinct Palindromic Words:

Convert the input string to lowercase.
Split the string into words.
Use a HashSet to store unique palindromic words.
For each word, check if it is a palindrome:
If it is, add it to the HashSet.
Return the size of the HashSet as the count of distinct palindromic words.
Check if a Word is a Palindrome:

Reverse the word and compare it to the original.
This captures the core functionality of counting distinct palindromic words in the input string.

Example Outputs and Explanations
Input: "Madam Arora teaches Malayalam"

Processing:
The string is converted to lowercase: "madam arora teaches malayalam".
The words are split into: ["madam", "arora", "teaches", "malayalam"].
Checking each word:
"madam": Palindrome (added to the set).
"arora": Palindrome (added to the set).
"teaches": Not a palindrome (not added).
"malayalam": Palindrome (added to the set).
Output: 3 distinct palindromic words: "madam", "arora", and "malayalam".
Input: "Nitin speaks Malayalam"

Processing:
The string is converted to lowercase: "nitin speaks malayalam".
The words are split into: ["nitin", "speaks", "malayalam"].
Checking each word:
"nitin": Palindrome (added to the set).
"speaks": Not a palindrome (not added).
"malayalam": Palindrome (added to the set).
Output: 2 distinct palindromic words: "nitin" and "malayalam".
Input: "Hello World"

Processing:
The string is converted to lowercase: "hello world".
The words are split into: ["hello", "world"].
Checking each word:
"hello": Not a palindrome (not added).
"world": Not a palindrome (not added).
Output: 0 distinct palindromic words (none found).


--------------------------------------------------------------------------------------------
Main Logic
Function nextGreater(int[] arr):

Initializes a result array and a stack.
Calls the recursive function findNextGreater starting from the last index.
Recursive Function findNextGreater(int index, int[] arr, int[] result, Stack<Integer> stack):

Base Case: Stops if the index is less than 0.
Pop Elements: Removes elements from the stack that are less than or equal to the current element.
Determine Next Greater:
If the stack is empty, set result[index] to -1.
If not, set result[index] to the top of the stack.
Push Current Element: Adds the current element to the stack.
Recursive Call: Calls itself for the previous index.

Explanation of Outputs
Input: {6, 8, 0, 1, 3}

Output: [8, -1, 1, 3, -1]
Explanation:
6: Next greater is 8.
8: No greater element to the right, so -1.
0: Next greater is 1.
1: Next greater is 3.
3: No greater element to the right, so -1.
Input: {1, 3, 2, 4}

Output: [3, 4, 4, -1]
Explanation:
1: Next greater is 3.
3: Next greater is 4.
2: Next greater is 4.
4: No greater element to the right, so -1.
Input: {10, 20, 30, 50}

Output: [20, 30, 50, -1]
Explanation:
10: Next greater is 20.
20: Next greater is 30.
30: Next greater is 50.
50: No greater element to the right, so -1.
Input: {50, 40, 30, 10}

Output: [-1, -1, -1, -1]
Explanation:
50: No greater element to the right, so -1.
40: No greater element to the right, so -1.
30: No greater element to the right, so -1.
10: No greater element to the right, so -1.